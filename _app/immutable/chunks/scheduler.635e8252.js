function x(){}const C=t=>t;function k(t,n){for(const e in n)t[e]=n[e];return t}function w(t){return t()}function F(){return Object.create(null)}function j(t){t.forEach(w)}function M(t){return typeof t=="function"}function A(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function P(t){return Object.keys(t).length===0}function E(t,...n){if(t==null){for(const o of n)o(void 0);return x}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function S(t,n,e){t.$$.on_destroy.push(E(n,e))}function U(t,n,e,o){if(t){const r=y(t,n,e,o);return t[0](r)}}function y(t,n,e,o){return t[1]&&o?k(e.ctx.slice(),t[1](o(n))):e.ctx}function B(t,n,e,o){if(t[2]&&o){const r=t[2](o(e));if(n.dirty===void 0)return r;if(typeof r=="object"){const a=[],d=Math.max(n.dirty.length,r.length);for(let u=0;u<d;u+=1)a[u]=n.dirty[u]|r[u];return a}return n.dirty|r}return n.dirty}function D(t,n,e,o,r,a){if(r){const d=y(n,e,o,a);t.p(d,r)}}function G(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function H(t){const n=typeof t=="string"&&t.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);return n?[parseFloat(n[1]),n[2]||"px"]:[t,"px"]}let l;function _(t){l=t}function f(){if(!l)throw new Error("Function called outside component initialization");return l}function I(t){f().$$.on_mount.push(t)}function J(t){f().$$.after_update.push(t)}function K(t,n){return f().$$.context.set(t,n),n}function L(t){return f().$$.context.get(t)}const i=[],g=[];let c=[];const b=[],m=Promise.resolve();let p=!1;function O(){p||(p=!0,m.then(v))}function N(){return O(),m}function q(t){c.push(t)}const h=new Set;let s=0;function v(){if(s!==0)return;const t=l;do{try{for(;s<i.length;){const n=i[s];s++,_(n),z(n.$$)}}catch(n){throw i.length=0,s=0,n}for(_(null),i.length=0,s=0;g.length;)g.pop()();for(let n=0;n<c.length;n+=1){const e=c[n];h.has(e)||(h.add(e),e())}c.length=0}while(i.length);for(;b.length;)b.pop()();p=!1,h.clear(),_(t)}function z(t){if(t.fragment!==null){t.update(),j(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(q)}}function Q(t){const n=[],e=[];c.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),c=n}export{O as A,J as a,g as b,U as c,B as d,K as e,S as f,G as g,H as h,L as i,q as j,M as k,C as l,F as m,x as n,I as o,v as p,P as q,j as r,A as s,N as t,D as u,Q as v,l as w,_ as x,w as y,i as z};
